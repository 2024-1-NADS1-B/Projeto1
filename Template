template:
Estrutura do Repositório
css
Copiar código
esp8266-aviculture-template/
├── .github/
│   └── workflows/
│       └── ci.yml
├── src/
│   └── main.ino
├── include/
│   ├── blynk_credentials.h
│   ├── led_functions.h
│   └── sensor_functions.h
├── test/
│   └── test_main.cpp
├── .gitignore
├── platformio.ini
├── README.md
└── LICENSE
Arquivos do Template
.gitignore

gitignore
Copiar código
.DS_Store
.idea/
.vscode/
.pio/
build/
lib_deps.ini
platformio.ini

ini
Copiar código
[env:esp8266]
platform = espressif8266
board = nodemcuv2
framework = arduino
lib_deps =
    blynkkk/Blynk
    adafruit/DHT sensor library
    johnrickman/LiquidCrystal_I2C
src/main.ino

cpp
Copiar código
#include "wifi_credentials.h"
#include "blynk_credentials.h"
#include "sensor_functions.h"
#include "led_functions.h"

void setup() {
    Serial.begin(115200);
    lcd.init();
    lcd.setBacklight(HIGH);
    dht.begin();
    Blynk.begin(BLYNK_AUTH_TOKEN, ssid, pass);

    pinMode(RED_LED_PIN, OUTPUT);
    pinMode(YELLOW_LED_PIN, OUTPUT);
    pinMode(GREEN_LED_PIN, OUTPUT);

    digitalWrite(RED_LED_PIN, LOW);
    digitalWrite(YELLOW_LED_PIN, LOW);
    digitalWrite(GREEN_LED_PIN, LOW);
}

void loop() {
    Blynk.run();
    delay(2000);
    readAndDisplaySensorData();
    controlLEDsBasedOnTemperature();
    delay(1000);
}
include/blynk_credentials.h

cpp
Copiar código
#ifndef BLYNK_CREDENTIALS_H
#define BLYNK_CREDENTIALS_H

#define BLYNK_TEMPLATE_ID "TMPL2HKR03-9w"
#define BLYNK_TEMPLATE_NAME "PROJETO AVICULTURA"
#define BLYNK_AUTH_TOKEN "Jsuay_1YnFLYQXHAeP4iBWB3VNKaV_YK"

#endif
include/led_functions.h

cpp
Copiar código
#ifndef LED_FUNCTIONS_H
#define LED_FUNCTIONS_H

#define RED_LED_PIN D2
#define YELLOW_LED_PIN D3
#define GREEN_LED_PIN D1
#define POT_PIN A0

void controlLEDsBasedOnTemperature() {
    float temperature = dht.readTemperature() + temperatureAdjustment;

    if (temperature >= 31 && temperature <= 35) {
        digitalWrite(RED_LED_PIN, HIGH);
        digitalWrite(YELLOW_LED_PIN, LOW);
        digitalWrite(GREEN_LED_PIN, LOW);
    } else if (temperature >= 28 && temperature <= 30) {
        digitalWrite(RED_LED_PIN, LOW);
        digitalWrite(YELLOW_LED_PIN, HIGH);
        digitalWrite(GREEN_LED_PIN, LOW);
    } else if (temperature >= 25 && temperature <= 27) {
        digitalWrite(RED_LED_PIN, LOW);
        digitalWrite(YELLOW_LED_PIN, LOW);
        digitalWrite(GREEN_LED_PIN, HIGH);
    } else {
        digitalWrite(RED_LED_PIN, LOW);
        digitalWrite(YELLOW_LED_PIN, LOW);
        digitalWrite(GREEN_LED_PIN, LOW);
    }

    int potValue = analogRead(POT_PIN);
    temperatureAdjustment = map(potValue, 0, 1023, -5, 5);
}

#endif
include/sensor_functions.h

cpp
Copiar código
#ifndef SENSOR_FUNCTIONS_H
#define SENSOR_FUNCTIONS_H

#include <DHT.h>
#include <Wire.h>
#include <LiquidCrystal_I2C.h>
#include <BlynkSimpleEsp8266.h>

LiquidCrystal_I2C lcd(0x27, 16, 2);
#define DHTPIN D4
#define DHTTYPE DHT11
DHT dht(DHTPIN, DHTTYPE);

float humidityAdjustment = 0.0;
float temperatureAdjustment = 0.0;

void readAndDisplaySensorData() {
    float humidity = dht.readHumidity() + humidityAdjustment;
    float temperature = dht.readTemperature() + temperatureAdjustment;

    if (isnan(humidity) || isnan(temperature)) {
        Serial.println("Erro ao ler o sensor!");
        lcd.clear();
        lcd.setCursor(0, 0);
        lcd.print("Erro no sensor");

        digitalWrite(RED_LED_PIN, LOW);
        digitalWrite(YELLOW_LED_PIN, LOW);
        digitalWrite(GREEN_LED_PIN, LOW);
    } else {
        lcd.clear();
        lcd.setCursor(0, 0);
        lcd.print("U: ");
        lcd.print(humidity);
        lcd.print("%");
        lcd.setCursor(0, 1);
        lcd.print("T: ");
        lcd.print(temperature);
        lcd.print(" C");

        Blynk.virtualWrite(V0, temperature);
        Blynk.virtualWrite(V1, humidity);
    }
}

#endif
test/test_main.cpp

cpp
Copiar código
#include <Arduino.h>
#include <unity.h>
#include <DHT.h>

#define DHTPIN D4
#define DHTTYPE DHT11
DHT dht(DHTPIN, DHTTYPE);

void test_dht_sensor() {
    float humidity = dht.readHumidity();
    float temperature = dht.readTemperature();

    TEST_ASSERT_FALSE(isnan(humidity));
    TEST_ASSERT_FALSE(isnan(temperature));
}

void setup() {
    UNITY_BEGIN();
    dht.begin();
    RUN_TEST(test_dht_sensor);
    UNITY_END();
}

void loop() {
    // Not used in this test
}
README.md

markdown
Copiar código
# ESP8266 Aviculture Project Template

This is a template repository for ESP8266 projects focused on aviculture monitoring using PlatformIO and Arduino framework.

## Getting Started

1. *Clone the Template:*
   Use the "Use this template" button to create a new repository from this template.

2. *Set Up PlatformIO:*
   Follow the instructions to install PlatformIO in your development environment.

3. *Configure Wi-Fi and Blynk:*
   Update the include/wifi_credentials.h and include/blynk_credentials.h with your Wi-Fi and Blynk credentials.

4. *Build and Upload:*
   Use PlatformIO to build and upload the firmware to your ESP8266 device.

5. *Run Tests:*
   Execute the test suite to ensure your setup is correct:
   sh
   pio test
License
This project is licensed under the MIT License.

go
Copiar código

**`LICENSE`**

MIT License

yaml
Copiar código

**`.github/workflows/ci.yml`**

yaml
name: CI

on: [push, pull_request]

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.x'

    - name: Install PlatformIO
      run: |
        python -m pip install --upgrade pip
        pip install platformio

    - name: Build Project
      run: pio run

    - name: Run Tests
      run: pio test
Criando o Repositório no GitHub
Crie um Novo Repositório:

No GitHub, clique em "New repository".
Dê um nome ao seu repositório (por exemplo, esp8266-aviculture-template).
Faça o Upload dos Arquivos:

Faça o upload dos arquivos e diretórios criados conforme a estrutura acima.
Marque como Template:

Vá para a página de configurações do repositório e marque a opção "Template repository".
Usando o Template
Para usar o template, siga estas etapas:

Criar um Novo Projeto:

No GitHub, vá para o seu template e clique em "Use this template".
Dê um nome ao seu novo projeto e crie o repositório.
Configurar o Projeto:

Clone o novo repositório para sua máquina local.
Abra o projeto no Visual Studio Code com a extensão PlatformIO.
Atualizar Credenciais:

Edite os arquivos include/wifi_credentials.h e include/blynk_credentials.h com suas credenciais de Wi-Fi e Blynk.
Build e Upload:

Use o PlatformIO para compilar e carregar o código no seu ESP8266.
Executar Testes:

No terminal do PlatformIO, execute pio test para rodar os testes automatizados
